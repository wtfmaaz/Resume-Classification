# -*- coding: utf-8 -*-
"""Resume classification

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12n_0fxjvIRrPJtGgLL5RI50v8TLJX6FL
"""

pip install streamlit

import streamlit as st
import pandas as pd
import numpy as np
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, classification_report
import pickle

# Function to preprocess and train the model
def train_model():
    # Load your resume dataset (ensure you have a CSV with 'Resume' and 'Category' columns)
    data = pd.read_csv("/content/Cleaned_Resumes.csv")  # Replace with your dataset

    # Extract features and labels
    X = data['Resume']
    y = data['Category']

    # Text vectorization using TF-IDF
    vectorizer = TfidfVectorizer(stop_words='english', max_features=3000)
    X_tfidf = vectorizer.fit_transform(X)

    # Split the dataset
    X_train, X_test, y_train, y_test = train_test_split(X_tfidf, y, test_size=0.2, random_state=42)

    # Train a Logistic Regression model
    model = LogisticRegression()
    model.fit(X_train, y_train)

    # Evaluate the model
    y_pred = model.predict(X_test)
    accuracy = accuracy_score(y_test, y_pred)
    st.write("Model Accuracy:", accuracy)

    # Save the model and vectorizer for later use
    with open("resume_model.pkl", "wb") as f:
        pickle.dump(model, f)
    with open("vectorizer.pkl", "wb") as f:
        pickle.dump(vectorizer, f)

    st.success("Model training completed!")

# Function to classify a new resume
def classify_resume(resume_text):
    # Load the trained model and vectorizer
    with open("resume_model.pkl", "rb") as f:
        model = pickle.load(f)
    with open("vectorizer.pkl", "rb") as f:
        vectorizer = pickle.load(f)

    # Transform the input text
    resume_vectorized = vectorizer.transform([resume_text])

    # Predict the category
    prediction = model.predict(resume_vectorized)
    return prediction[0]

# Streamlit app
st.title("Resume Classification App")
st.write("Upload a resume or type text to classify it into predefined categories.")

# Sidebar for training the model
if st.sidebar.button("Train Model"):
    train_model()

# Resume upload or text input
resume_input = st.text_area("Paste Resume Text Here")

if st.button("Classify Resume"):
    if resume_input.strip():
        category = classify_resume(resume_input)
        st.success(f"The resume is classified as: {category}")
    else:
        st.warning("Please provide resume text to classify.")